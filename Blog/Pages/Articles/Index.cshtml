@page
@model Blog.Pages.Articles.IndexModel

@{
    ViewData["Title"] = "Articles";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<h1>Articles</h1>

<a asp-page="Create">Create New</a>

<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find an article by Tag/Title/Content:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>

    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Articles[0].Author)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Articles[0].Title)
                </th>
                <th>
                    <a asp-page="./Index" asp-route-sortOrder="@Model.DateSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                        @Html.DisplayNameFor(model => model.Articles[0].LastEditDate)
                    </a>
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Articles[0].Tags)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.Articles[0].Comments)
                </th>


                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Articles)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Author)
                    </td>
                    <td>
                        <b>
                            @Html.DisplayFor(modelItem => item.Title)
                        </b>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastEditDate)
                    </td>
                    <td>
                        @foreach (var tag in item.Tags)
                        {
                            @Html.DisplayFor(modelItem => tag.Id)
                            <span>  </span>
                        }
                    </td>
                    <td>
                        @item.Comments?.Count()
                    </td>


                    <td rowspan="2">
                        <a asp-page="./Details" asp-route-id="@item.Id">View</a>

                        @if (User.Identity.Name == item.Author || User.Claims.Where(c => c.Type == "IsEditor").Count() > 0)
                        {
                            <br/>
                            <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a>
                            <br/>
                            <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
                        }
                    </td>

                </tr>

                <tr>
                    <td></td>
                    <td colspan="4">
                        @*Version for plain text (before Rich text editor was added)*@
                        @*@item.Content.Substring(0, Math.Min(280, item.Content.Length))*@

                        @*Version woith removed formatting*@
                        @System.Text.RegularExpressions.Regex.Replace(item.Content.Substring(0, Math.Min(280, item.Content.Length)).ToString(), "<[^>]*>", "")
                        <a asp-page="./Details" asp-route-id="@item.Id"> . . . </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

 
@{
    var prevDisabled = !Model.Articles.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Articles.HasNextPage ? "disabled" : "";
}


<a style="position:center;" asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Articles.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Articles.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @nextDisabled">
    Next
</a>